<?php

namespace AppBundle\Repository;

use AppBundle\Entity\MatchEvent;

/**
 * MatchEventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MatchEventRepository extends \Doctrine\ORM\EntityRepository
{
    public function findBestScorersEvent(){
        $qb = $this->createQueryBuilder('match_event');
        
        $qb->leftJoin('match_event.match','match')
            ->leftJoin('match_event.player','player')
            ->leftJoin('match.saison','saison')
            ->where('saison.running=true')
            ->andWhere('match_event.type=:eventType')
            ->setParameter('eventType',MatchEvent::TYPE_GOAL)
            ->groupBy('match_event.player')
            ->addSelect('player')
            ->addSelect('match')
            ->leftJoin('match.competition','competition')
            ->andWhere('competition.oldId!=11')//On exclut les amicaux
            ->addSelect('count(match_event.player) AS goals')
            ->addSelect('count(match_event.match) AS matchs')
            ->orderBy('goals','DESC')
        ;
        
        return $qb->getQuery()->getResult();
        
    }
    public function findBestScorersEventAllTime($limit = 30){
        $qb = $this->createQueryBuilder('match_event');
        
        $qb->leftJoin('match_event.match','match')
            ->leftJoin('match_event.player','player')
            ->leftJoin('match.saison','saison')
//            ->where('saison.running=true')
            ->andWhere('match_event.type=:eventType')
            ->setParameter('eventType',MatchEvent::TYPE_GOAL)
            ->groupBy('match_event.player')
            ->addSelect('player')
            ->addSelect('match')
            ->leftJoin('match.competition','competition')
            ->andWhere('competition.oldId!=11')//On exclut les amicaux
            ->addSelect('count(match_event.player) AS goals')
            ->addSelect('count(match_event.match) AS matchs')
            ->orderBy('goals','DESC')
            ->setMaxResults($limit)
        ;
        
        return $qb->getQuery()->getResult();
        
    }
    
    public function findBestScorersEventJupiler(){
        $qb = $this->createQueryBuilder('match_event');
        
        $qb->leftJoin('match_event.match','match')
            ->leftJoin('match_event.player','player')
            ->leftJoin('match.saison','saison')
            ->where('saison.running=true')
            ->andWhere('match_event.type=:eventType')
            ->setParameter('eventType',MatchEvent::TYPE_GOAL)
            ->groupBy('match_event.player')
            ->addSelect('player')
            ->addSelect('match')
            ->leftJoin('match.competition','competition')
            ->andWhere('competition.oldId=1')
            ->addSelect('count(match_event.player) AS goals')
            ->addSelect('count(match_event.match) AS matchs')
            ->orderBy('goals','DESC')
        ;
        
        return $qb->getQuery()->getResult();
        
    }
}
